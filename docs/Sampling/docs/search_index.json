[["index.html", "1 Simple Random Sampling", " 1 Simple Random Sampling Example Given a population of size \\(N=5\\), list all of the possible samples of size \\(n=3\\). That is, list the \\({5\\choose 3}=10\\) possible combinations. Solution Use the function combn() to list the combinations. The argument x = is a vector of \\(N\\) elements and the argument m = is the number of elements to sample from the population. combn(x = 1:5, m = 3) ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] ## [1,] 1 1 1 1 1 1 2 2 2 3 ## [2,] 2 2 2 3 3 4 3 3 4 4 ## [3,] 3 4 5 4 5 5 4 5 5 5 The 10 possible combinations are \\((1,2,3),\\,(1,2,4),\\dots,\\,(3,4,5)\\). Example Given a population of size \\(N=5\\), where \\(X_1=2\\), \\(X_2=5\\), \\(X_3=8\\), \\(X_4=12\\) and \\(X_5=13\\), list all the possible samples of size \\(n=3\\). That is, list the \\({5\\choose 3}=10\\) possible combinations. Solution Make sure the PASWR2 package is loaded into your R session. Then use the function srs(). The argument popvalues = is a vector of the values of the \\(N\\) elements in the population and the argument m = is the number of elements to sample. library(PASWR2) srs(popvalues = c(2, 5, 8, 12, 13), n = 3) ## [,1] [,2] [,3] ## [1,] 2 5 8 ## [2,] 2 5 12 ## [3,] 2 5 13 ## [4,] 2 8 12 ## [5,] 2 8 13 ## [6,] 2 12 13 ## [7,] 5 8 12 ## [8,] 5 8 13 ## [9,] 5 12 13 ## [10,] 8 12 13 The 10 possible combinations are \\((2,5,8),\\,(2,5,12),\\dots,\\,(8,12,13)\\). Example A teacher wants an algorithm that will randomly select 5 students from a large lecture section with 180 students to present their work at the board. Solution Assume the students in the class are numbered from 1 to 180 and that students know their numbers. Then use the sample() function to select 5 students. The argument x = is a vector of \\(N\\) elements, the argument size = is the number of elements to sample and the argument replace = states whether sampling should be done with or without replacement. This assumes there is an equal probability of sampling any student. sample(x = 1:180, size = 5, replace = FALSE) ## [1] 164 61 149 51 70 Example Randomly select 5 people from a group of 20 where the individuals are labeled from 1 to 20 and individuals labeled 19 or 20 are four times more likely to be selected than the individuals labeled 1 through 18. Solution The individuals 1 to 18 have a probability of being sampled of \\(\\frac{1}{26}\\) while individuals 19 and 20 have a probability of being sampled of \\(\\frac{4}{26}\\). A vector of probabilities of being sampled for each element in the population can be given to the argument prob =. sample(x = 1:20, size = 5, replace = FALSE, prob = c(rep(1/26, 18), rep(4/26, 2))) ## [1] 4 19 2 16 14 "],["stratified-sampling.html", "2 Stratified Sampling", " 2 Stratified Sampling Example Suppose a company has 300 employees; 100 entry-level staff, 100 mid-level staff and 100 senior staff. Obtain a stratified sample of 30 total employees, containing 10 employees from each level, that could be used to investigate things like employee performance scores. Solution Start by creating a data frame showing the 300 employees' levels and their unique employee ID. employees &lt;- data.frame(level = rep(c(&quot;entry&quot;, &quot;mid&quot;, &quot;senior&quot;), each = 100), employee_ID = 1:300) Then create a subset of the data in each strata and use sample() to randomly select the rows (or employees) to include in the sample. entry &lt;- subset(x = employees, subset = (level == &quot;entry&quot;)) entry_sample &lt;- entry[sample(x = nrow(entry), size = 10, replace = FALSE), ] mid &lt;- subset(x = employees, subset = (level == &quot;mid&quot;)) mid_sample &lt;- mid[sample(x = nrow(mid), size = 10, replace = FALSE), ] senior &lt;- subset(x = employees, subset = (level == &quot;senior&quot;)) senior_sample &lt;- senior[sample(x = nrow(senior), size = 10, replace = FALSE), ] Combine the randomly selected employees in each strata into one stratified sample and verify that there are 10 employees sampled from each level. The employee ID's can then be used to find things such as the performance score of all employees in this startified sample. employees_sample &lt;- rbind(entry_sample, mid_sample, senior_sample) table(employees_sample$level) ## ## entry mid senior ## 10 10 10 Example A botanist wants to study the characteristics of a common weed and its adaptation to various geographical regions on a remote island. The island has well-defined strata that can be classified as desert, forest, mountains, and swamp. If 5000 acres of the island are desert, 1000 acres are forest, 500 acres are mountains, and 3500 acres are swamp, and the botanist wants to sample 5% of the population using a stratified sampling scheme that is proportional to the strata, how many acres of each of the four regions will they have to sample? Solution The botanist wants to sample a total of 5% of 10,000 acres. That is 500 acres. The sample size taken from each strata should be proportional to the size of that strata in the population. So for desert, forest, mountain and swamp regions, the botanist should sample the following acres of each. #desert 500*(5000/10000) ## [1] 250 #forest 500*(1000/10000) ## [1] 50 #mountains 500*(500/10000) ## [1] 25 #swamp 500*(3500/10000) ## [1] 175 This gives a total of 500 acres sampled across the island. Example Obtain a stratified sample of 500 acres from the island that has the same proportions of desert, forest, mountain and swamp regions as seen in the population. Solution Start by setting up a data frame containing the type of region each acre on the island is classfied as and a unique identifier for every acre. island &lt;- data.frame(region = rep(c(&quot;Desert&quot;, &quot;Forest&quot;, &quot;Mountain&quot;, &quot;Swamp&quot;), times = c(5000, 1000, 500, 3500)), ID = 1:10000) Then create a subset of the data in each strata (or region) and use sample() to randomly select the rows to include in the sample. desert &lt;- subset(x = island, subset = (region == &quot;Desert&quot;)) desert_sample &lt;- desert[sample(x = nrow(desert), size = 500*(5000/10000)), ] forest &lt;- subset(x = island, subset = (region == &quot;Forest&quot;)) forest_sample &lt;- forest[sample(x = nrow(forest), size = 500*(1000/10000)), ] mountain &lt;- subset(x = island, subset = (region == &quot;Mountain&quot;)) mountain_sample &lt;- mountain[sample(x = nrow(mountain), size = 500*(500/10000)), ] swamp &lt;- subset(x = island, subset = (region == &quot;Swamp&quot;)) swamp_sample &lt;- swamp[sample(x = nrow(swamp), size = 500*(3500/10000)), ] Combine the randomly selected acres in each region into one stratified sample and verify that the numbers sampled agree with what is expected, give the proportion of each type of region on the island. The unique identifier of each acre in island_sample can then be used to know which areas should be sampled from. island_sample &lt;- rbind(desert_sample, forest_sample, mountain_sample, swamp_sample) table(island_sample$region) ## ## Desert Forest Mountain Swamp ## 250 50 25 175 "],["systematic-sampling.html", "3 Systematic Sampling", " 3 Systematic Sampling Example Suppose a systematic sample of size \\(n=10\\) is desired from a list containing 1000 members. Then \\(k=\\frac{1000}{10}=100\\), so every 100th member of the list should be sampled. To pick the initial starting point, select a random between 1 and 100. Solution initial &lt;- sample(x = 1:100, size = 1) seq(from = initial, to = 1000, by = 100) ## [1] 45 145 245 345 445 545 645 745 845 945 Example Produce a list of locations to sample for a systematic sample if \\(N=1000\\) and \\(n=20\\). Solution To make a systematic sample, every \\(k=\\frac{1000}{20}=50^{th}\\) item will be observed. To start the process, select a random number between 1 and 50. initial &lt;- sample(x = 1:50, size = 1) seq(from = initial, to = 1000, by = 50) ## [1] 40 90 140 190 240 290 340 390 440 490 540 590 640 690 740 790 840 890 940 ## [20] 990 "],["cluster-sampling.html", "4 Cluster Sampling", " 4 Cluster Sampling Example Suppose a company that gives city tours wants to survey its customers. They ask every customer to rate their experience on a scale of 1 to 10. One tour guide runs ten tours a day, from which four should be randomly selected and all the customer ratings from these should be included in the sample. Randomly select these clusters of customers for the company and include their ratings in the sample. Solution To start, set up a data frame to contain the customer ratings and the tour they belonged to. Each tour is given to 20 customers. tours &lt;- data.frame(tour = rep(1:10, each = 20), rating = sample(x = 1:10, size = 200, replace = TRUE, prob = c(rep(1/20, 6), rep(1/5, 3), 1/10))) head(tours) tour rating 1 7 1 3 1 5 1 8 1 7 1 9 In order to randomly select the tours to use as the clusters, use the sample() function. clusters &lt;- sample(1:10, size = 4, replace = FALSE) clusters ## [1] 2 7 9 8 Then, the sample includes all customers who were on a tours 2, 7, 8 or 9. cluster_sample &lt;- tours[tours$tour %in% clusters, ] We can verify that all customers from each tour group chosen as a cluster are included in the sample. table(cluster_sample$tour) ## ## 2 7 8 9 ## 20 20 20 20 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
