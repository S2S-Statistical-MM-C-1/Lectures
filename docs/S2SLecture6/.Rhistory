?webex-box
x <- 3
y <- c(2, 4, 1)
rep(x=3:5, times=3)
rep(x=c(2,4,6), each=2)
rep(x = 4:7, times = 1:4)
rep(x = 4:7, each = 1:4)
rep(x = 1:4, times = 1:4)
rep(c("blue", "red"), times=c(3, 2))
.libPaths("C:/Users/mtb3f/OneDrive - University of Glasgow/RStudio and ShinyApps/R/win-library/4.0")
a <- c(2, 2, -1)
b <- 2
c <- a + b
c
.libPaths("C:/Users/mtb3f/OneDrive - University of Glasgow/RStudio and ShinyApps/R/win-library/4.0")
a <- sample(c(TRUE, FALSE), 1)
b <- sample(c(TRUE, FALSE), 1)
knitr::opts_chunk$set(echo=TRUE, eval=TRUE, comment=NA)
(a & b)
(a & !b)
(!a & b)
(!a & !b)
rep(x = c(1, 0), times = c(2, 1, 3, 1, 4, 1))
rep(x = c(1, 0), times = c(3, 5))
rep(x = c(1, 0), each = c(3, 5))
rep(x = c(1, 0), each = c(3))
rep(2:4, each=1)
rep(x = c(1, 0), times = 3)
rep(x = c(1, 0), times = c(3, 4))
rep(x = c(1, 0), times = c(2, 1))
rep(x = c(1, 0), times = c(2, 1))
rep(rep(x = c(1, 0), times = c(2, 1)), times = 3)
rep(rep(x = c(1, 0), times = c(2, 1)), times = c(1, 2))
rep(rep(x = c(1, 0), times = c(2, 1)), times = c(1, 2, 3))
rep(rep(x = c(1, 0), times = c(2, 1)), times = 3)
seq(from = 3.25, to = 5.5, by = 0.25)
seq(from = 5.5, to = 3.25, by = 0.25)
?seq
seq(from = 5.5, to = 3.25, by = -0.25)
numeric <- as.numeric(logical)
logical <- rep(x = c(1, 1, 0), times = 3)
logical <- rep(rep(x = c(1, 0), times = c(2, 1)), times = 3)
numeric <- as.numeric(logical)
logical
logical <- rep(x = c(TRUE, TRUE, FALSE), times = 3)
logical <- rep(rep(x = c(TRUE, FALSE), times = c(2, 1)), times = 3)
logical
numeric <- as.numeric(logical)
sequence <- seq(from = 5.5, to = 3.25, by = -0.25)
numeric + sequence
sequence <- seq(from = 5.5, to = 3.5, by = -0.25)
sequence <- seq(from = 5.5, to = 3.5, by = -0.25)
numeric + sequence
subset(x = numeric + sequence, subset = (numeric + sequence > 5.5))
knitr::opts_chunk$set(echo=TRUE, eval=TRUE, comment=NA)
library(knitr)
library(webexercises)
include_graphics("Images/RStudioWindow.png")
?include_graphics
typeof(s)
s <- c(TRUE, TRUE, FALSE)
t <- c(FALSE, TRUE, TRUE)
typeof(s)
rep(x = 2:7,
times = rep(x = c(1, 2), times = 3))
letters
numeric & sequence
c(3, 2, 1) & c(3, 1, 2)
as.logical(c(3, 2, 1))
as.logical(c(1, 0, -1))
c(3, 2, 1) | c(3, 1, 2)
c(3, 2, 1) | c(3, 1, 4)
c(3, 2, 1) == c(3, 1, 4)
knitr::opts_chunk$set(echo=TRUE, eval=TRUE, comment=NA)
library(knitr)
library(webexercises)
include_graphics("Images/PASWR2.png")
s <- c(2, 4, 1)
t <- c(2, 3, 5)
s == t
s < t
s != t
s[2] == t[3]
s <- c(2, 4, 1)
t <- c(2, 3, 4)
s[2] == t[3]
?rep
?subset
?rep
library(MASS) # load MASS package
opar <- par(no.readonly = TRUE) # read in current parameters
par(mar=c(0.1, 7.1, 0.1, 0.1)) # more space needed on side 2
with(data = Cars93, boxplot(Min.Price, ylim = c(0, 50),
ylab = "Minimum Price (in \\$1000)\n for basic version",
col = "springgreen3"))
f <- with(data=Cars93, fivenum(Min.Price)) # store fivenum values in f
text(x = rep(1.25, 5), y = f, labels=c("Min", expression(H[L]),
expression(Q[2]) , expression(H[U]), "Max"), pos=4)
par(opar) # reset to original parameters
library(MASS) # load MASS package
opar <- par(no.readonly = TRUE) # read in current parameters
par(mar=c(0.1, 7.1, 0.1, 0.1)) # more space needed on side 2
fig <- with(data = Cars93, boxplot(Min.Price, ylim = c(0, 50),
ylab = "Minimum Price (in \\$1000)\n for basic version",
col = "springgreen3"))
f <- with(data=Cars93, fivenum(Min.Price)) # store fivenum values in f
fig <- text(x = rep(1.25, 5), y = f, labels=c("Min", expression(H[L]),
expression(Q[2]) , expression(H[U]), "Max"), pos=4)
fig
par(opar) # reset to original parameters
library(MASS) # load MASS package
opar <- par(no.readonly = TRUE) # read in current parameters
par(mar=c(0.1, 7.1, 0.1, 0.1)) # more space needed on side 2
with(data = Cars93, boxplot(Min.Price, ylim = c(0, 50),
ylab = "Minimum Price (in \\$1000)\n for basic version",
col = "springgreen3"))
f <- with(data=Cars93, fivenum(Min.Price)) # store fivenum values in f
text(x = rep(1.25, 5), y = f, labels=c("Min", expression(H[L]),
expression(Q[2]) , expression(H[U]), "Max"), pos=4)
fig <- recordPlot() # Save plot in object "fig"
# Clear the Plot Window
plot.new()
# Saved Plot
res
library(MASS) # load MASS package
opar <- par(no.readonly = TRUE) # read in current parameters
par(mar=c(0.1, 7.1, 0.1, 0.1)) # more space needed on side 2
with(data = Cars93, boxplot(Min.Price, ylim = c(0, 50),
ylab = "Minimum Price (in \\$1000)\n for basic version",
col = "springgreen3"))
f <- with(data=Cars93, fivenum(Min.Price)) # store fivenum values in f
text(x = rep(1.25, 5), y = f, labels=c("Min", expression(H[L]),
expression(Q[2]) , expression(H[U]), "Max"), pos=4)
fig <- recordPlot() # Save plot in object "fig"
# Clear the Plot Window
plot.new()
# Saved Plot
fig
par(opar) # reset to original parameters
library(MASS) # load MASS package
opar <- par(no.readonly = TRUE) # read in current parameters
par(mar=c(0.1, 7.1, 0.1, 0.1)) # more space needed on side 2
with(data = Cars93, boxplot(Min.Price, ylim = c(0, 50),
ylab = "Minimum Price (in \\$1000)\n for basic version",
col = "springgreen3"))
f <- with(data=Cars93, fivenum(Min.Price)) # store fivenum values in f
text(x = rep(1.25, 5), y = f, labels=c("Min", expression(H[L]),
expression(Q[2]) , expression(H[U]), "Max"), pos=4)
fig <- recordPlot() # Save plot in object "fig"
# Clear the Plot Window
plot.new()
# Saved Plot
fig
par(opar) # reset to original parameters
library(MASS) # load MASS package
opar <- par(no.readonly = TRUE) # read in current parameters
par(mar=c(0.1, 7.1, 0.1, 0.1)) # more space needed on side 2
with(data = Cars93, boxplot(Min.Price, ylim = c(0, 50),
ylab = "Minimum Price (in \\$1000)\n for basic version",
col = "springgreen3"))
f <- with(data=Cars93, fivenum(Min.Price)) # store fivenum values in f
text(x = rep(1.25, 5), y = f, labels=c("Min", expression(H[L]),
expression(Q[2]) , expression(H[U]), "Max"), pos=4)
fig <- recordPlot() # Save plot in object "fig"
par(opar) # reset to original parameters
BODYFAT$sex <- factor(BODYFAT$sex, labels = c("Female", "Male"))
library(PASWR2) # load MASS package
BODYFAT$sex <- factor(BODYFAT$sex, labels = c("Female", "Male"))
boxplot(fat ~ sex, data = BODYFAT, col = c("gray80", "gray20"), ylab = "Percent Bodyfat")
library(PASWR2) # PASWR2 contains dataframe BODYFAT
BODYFAT$sex <- factor(BODYFAT$sex, labels = c("Female", "Male"))
boxplot(fat ~ sex, data = BODYFAT, col = c("gray80", "gray20"), ylab = "Percent Bodyfat")
library(exams)
library(PASWR2)
library(binom)
library(knitr)
library(kableExtra)
library(dplyr)
library(tidyr)
library(MASS)
question06 <- c("Ch6Q06.Rmd") # when compiled above it gave df of F dist as probabilities (e.g. 0.89. 0.01) - perhaps inherited from previous file
exams2moodle(question06, n = 9, name = "PASWR_Ch6" , dir = "output",
stitle = question06,
iname=TRUE)
setwd("C:/Users/mtb3f/OneDrive - University of Glasgow/Stats Level 2/2023_24 S2S and S2Y/Ugarte 2016 Probability and Statistics with R/Ugarte Exercises as Quiz Questions (R exams)/Chapter 6 Rmd Files")
question06 <- c("Ch6Q06.Rmd") # when compiled above it gave df of F dist as probabilities (e.g. 0.89. 0.01) - perhaps inherited from previous file
exams2moodle(question06, n = 9, name = "PASWR_Ch6" , dir = "output",
stitle = question06,
iname=TRUE)
rm(combinations_df) #This line should be run to 'reset' combinations_df before next line is run
exams2moodle(questions1, n = 9, name = "PASWR_Ch606" , dir = "output",
stitle = questions1,
iname=TRUE)
question06 <- c("Ch6Q06.Rmd") # when compiled above it gave df of F dist as probabilities (e.g. 0.89. 0.01) - perhaps inherited from previous file
exams2moodle(question06, n = 9, name = "PASWR_Ch606" , dir = "output",
stitle = question06,
iname=TRUE)
questions1 <- c("Ch6Q01.Rmd","Ch6Q02.Rmd","Ch6Q04.Rmd","Ch6Q06.Rmd","Ch6Q08.Rmd","Ch6Q11.Rmd","Ch6Q13.Rmd")
rm(list = ls()) #This line should be run to 'reset' combinations_df before next line is run
rm(combinations_df) #This line should be run to 'reset' combinations_df before next line is run
exams2moodle(questions1, n = 9, name = "PASWR_Ch6" , dir = "output",
stitle = questions1,
iname=TRUE)
questions1 <- c("Ch6Q01.Rmd","Ch6Q02.Rmd","Ch6Q04.Rmd","Ch6Q06.Rmd","Ch6Q08.Rmd","Ch6Q11.Rmd","Ch6Q13.Rmd")
rm(list = ls()) #This line should be run to 'reset' combinations_df before next line is run
rm(combinations_df) #This line should be run to 'reset' combinations_df before next line is run
questions1 <- c("Ch6Q01.Rmd","Ch6Q02.Rmd","Ch6Q04.Rmd","Ch6Q06.Rmd","Ch6Q08.Rmd","Ch6Q11.Rmd","Ch6Q13.Rmd")
exams2moodle(questions1, n = 9, name = "PASWR_Ch6" , dir = "output",
stitle = questions1,
iname=TRUE)
exams2html(question06) #...before next line is run
question06 <- c("Ch6Q06.Rmd") # when compiled above it gave df of F dist as probabilities (e.g. 0.89. 0.01) - perhaps inherited from previous file
exams2html(question06) #...before next line is run
rm(combinations_df) #These two lines should be run to 'reset' combinations_df...
exams2html(questions1) #...before next line is run
question06 <- c("Ch6Q06.Rmd") # when compiled above it gave df of F dist as probabilities (e.g. 0.89. 0.01) - perhaps inherited from previous file
rm(combinations_df) #These two lines should be run to 'reset' combinations_df...
exams2html(questions1) #...before next line is run
question06 <- c("Ch6Q06.Rmd") # when compiled above it gave df of F dist as probabilities (e.g. 0.89. 0.01) - perhaps inherited from previous file
rm(combinations_df) #These two lines should be run to 'reset' combinations_df...
exams2html(questions06) #...before next line is run
question06 <- c("Ch6Q06.Rmd") # when compiled above it gave df of F dist as probabilities (e.g. 0.89. 0.01) - perhaps inherited from previous file
rm(combinations_df) #These two lines should be run to 'reset' combinations_df...
exams2html(question06) #...before next line is run
exams2moodle(question06, n = 9, name = "PASWR_Ch606" , dir = "output",
stitle = question06,
iname=TRUE)
