setwd("~/Library/CloudStorage/OneDrive-UniversityofGlasgow/Stats 2S/Labs/Lab 3/S2SLab3")
site <- "http://www1.appstate.edu/~arnholta/PASWR/CD/data/Bodyfat.csv"
FAT <- read.csv(file = site)
load(url(paste("https://github.com/UofGAnalyticsData/R/blob",
"/main/Week%203/cia.RData?raw=true",sep=" ")))
load(url(paste("https://github.com/UofGAnalyticsData/R/blob",
"/main/Week%203/cia.RData?raw=true",sep="")))
load(url(paste("https://github.com/UofGAnalyticsData/R/blob",
"/main/Week%203/cia.RData?raw=true",sep="")))
View(cia)
rm("cia", "site")
cia <- read.csv(file = "Data/cia.csv")
View(cia)
health <- read.table(file = "Data/health.txt")
View(health)
health <- read.table(file = "Data/health.txt", header = TRUE)
View(health)
ships <- read.table(file = "Data/ships.txt")
View(ships)
ships <- read.table(file = "Data/ships.txt", header = TRUE)
View(ships)
cars <- read.csv(file = "Data/cars.csv")
View(cars)
chol <- read.tabel(file = "Data/cho.txt", header = TRUE)
chol <- read.table(file = "Data/cho.txt", header = TRUE)
chol <- read.table(file = "Data/chol.txt", header = TRUE)
View(chol)
chol2 <- read.csv(file = "Data/chol.csv")
View(chol2)
?write.table
#export chol2 as .txt file
write.table(chol2, file = "chol.txt")
?read.table
str(chol2)
?read.csv
cars <- read.csv(file = "Data/cars.csv", na.strings = "*")
View(cars)
cars <- read.csv(file = "Data/cars.csv")
View(cars)
View(health)
View(cia)
#export cia as .txt file
write.table(cia, file="cia.txt", sep="\t", na="MISSING", dec=",")
cia <- read.csv(file = "Data/cia.csv", na.strings="?") #good option for missing values (?)
View(cia)
#export cia as .txt file
write.table(cia, file="cia.txt", sep="\t", na="MISSING", dec=",")
knitr::opts_chunk$set(echo = TRUE, eval=TRUE, comment=NA)
library(webexercises)
library(PASWR2)
cia <- read.table(file = "cia.txt", header = TRUE, sep = "\t", na.strings = "MISSING", dec = ",")
View(cia)
cia2 <- read.csv(file = "Data/cia.csv", na.strings="?") #good option for missing values (?)
View(cia2)
.libPaths("C:/Users/mtb3f/OneDrive - University of Glasgow/RStudio and ShinyApps/R/win-library/4.0")
.libPaths("C:/Users/mtb3f/OneDrive - University of Glasgow/RStudio and ShinyApps/R/win-library/4.0")
.libPaths("C:/Users/mtb3f/OneDrive - University of Glasgow/RStudio and ShinyApps/R/win-library/4.0")
for(i in 1:10){
print(i)
}
for(i in 1:5){
print(i)
}
x <- 86
guess <- 9
x <- 10034
old_guess <- 100
new_guess <- (old_guess/2) + (x/2*old_guess)
while((old_guess - new_guess) > 0.0001){
old_guess <- new_guess
new_guess <- (old_guess/2) + (x/2*old_guess)
}
x <- 10034
old_guess <- 100
new_guess <- (old_guess/2) + (x/2*old_guess)
while(abs(old_guess - new_guess) > 0.0001){
old_guess <- new_guess
new_guess <- (old_guess/2) + (x/2*old_guess)
}
abs(old_guess - new_guess)
x <- 10034
old_guess <- 100
new_guess <- (old_guess/2) + (x/2*old_guess)
rm("guess")
x <- 10034
old_guess <- 100
new_guess <- (old_guess/2) + (x/2*old_guess)
x <- 10034
old_guess <- 100
new_guess <- (old_guess/2) + (x/(2*old_guess))
while(abs(old_guess - new_guess) > 0.0001){
old_guess <- new_guess
new_guess <- (old_guess/2) + (x/2*old_guess)
}
x <- 10034
old_guess <- 100
new_guess <- (old_guess/2) + (x/(2*old_guess))
abs(old_guess - new_guess) > 0.0001
old_guess <- new_guess
new_guess <- (old_guess/2) + (x/(2*old_guess))
abs(old_guess - new_guess) > 0.0001
old_guess <- new_guess
new_guess <- (old_guess/2) + (x/(2*old_guess))
abs(old_guess - new_guess) > 0.0001
x <- 10034
old_guess <- 100
new_guess <- (old_guess/2) + (x/(2*old_guess))
while(abs(old_guess - new_guess) > 0.0001){
old_guess <- new_guess
new_guess <- (old_guess/2) + (x/(2*old_guess))
}
x <- 10034
old_guess <- 10
new_guess <- (old_guess/2) + (x/(2*old_guess))
while(abs(old_guess - new_guess) > 0.0001){
old_guess <- new_guess
new_guess <- (old_guess/2) + (x/(2*old_guess))
}
x <- 10034
old_guess <- 10
new_guess <- (old_guess/2) + (x/(2*old_guess))
i <- 0
while(abs(old_guess - new_guess) > 0.0001){
old_guess <- new_guess
new_guess <- (old_guess/2) + (x/(2*old_guess))
i <- i+1
}
x <- 10034
old_guess <- 10
new_guess <- (old_guess/2) + (x/(2*old_guess))
i <- 0
while(abs(old_guess - new_guess) > 0.0001){
old_guess <- new_guess
new_guess <- (old_guess/2) + (x/(2*old_guess))
i <- i+1
}
c(new_guess, i)
x <- 10034
old_guess <- 10
new_guess <- (old_guess/2) + (x/(2*old_guess))
i <- 0
while((new_guess - old_guess) > 0.0001){
old_guess <- new_guess
new_guess <- (old_guess/2) + (x/(2*old_guess))
i <- i+1
}
c(new_guess, i)
x <- 10034
old_guess <- 10
new_guess <- (old_guess/2) + (x/(2*old_guess))
i <- 0
while(abs(new_guess - old_guess) > 0.0001){
old_guess <- new_guess
new_guess <- (old_guess/2) + (x/(2*old_guess))
i <- i+1
}
c(new_guess, i)
x <- 10034
old_guess <- 10
new_guess <- (old_guess/2) + (x/(2*old_guess))
i <- 0
while((new_guess - old_guess) > 0.0001){
old_guess <- new_guess
new_guess <- (old_guess/2) + (x/(2*old_guess))
i <- i+1
}
c(new_guess, i)
x <- rnorm(1, mean = 0, sd = 1)
if(x >= -1 & x <= 1){
print("x is in the region [-1, 1]")
} else {
print("x is not in the region [-1, 1]")
}
x <- rnorm(1, mean = 0, sd = 1)
if(x >= -1 & x <= 1){
print("x is in the region [-1, 1]")
} else {
print("x is not in the region [-1, 1]")
}
x <- rnorm(1, mean = 0, sd = 1)
if(x >= -1 & x <= 1){
print("x is in the region [-1, 1]")
} else {
print("x is not in the region [-1, 1]")
}
x <- rnorm(1, mean = 0, sd = 1)
if(x >= -1 & x <= 1){
print("x is in the region [-1, 1]")
} else {
print("x is not in the region [-1, 1]")
}
x <- rnorm(1, mean = 0, sd = 1)
if(x >= -1 & x <= 1){
print("x is in the region [-1, 1]")
} else {
print("x is not in the region [-1, 1]")
}
x <- rnorm(1, mean = 0, sd = 1)
if(x >= -1 & x <= 1){
print("x is in the region [-1, 1]")
} else {
print("x is not in the region [-1, 1]")
}
x <- rnorm(1, mean = 0, sd = 1)
if(x >= -1 & x <= 1){
print("x is in the region [-1, 1]")
} else {
print("x is not in the region [-1, 1]")
}
ifelse(x >= -1 & x <= 1, print("x is in the region [-1, 1]"), print("x is not in the region [-1, 1]"))
x <- rnorm(5)
order(x)
sort(x)
normal <- function(n, m = 0, s = 1){
x <- rnorm(n = n, mean = m, sd = s)
x <- sort(x)
prob <- pnorm(p = x, mean = m, sd = s)
pdf <- dnorm(x = x, mean = m, sd = s)
cbind(x, prob, pdf)
}
normal(12)
normal <- function(n, m = 0, s = 1){
x <- rnorm(n = n, mean = m, sd = s)
x <- sort(x)
prob <- pnorm(q = x, mean = m, sd = s)
pdf <- dnorm(x = x, mean = m, sd = s)
cbind(x, prob, pdf)
}
normal(12)
normal(n = 12, m = 200, s = 40)
normal(n = 5, m = 200, s = 40)
knitr::opts_chunk$set(echo = TRUE, eval=TRUE, comment=NA)
library(webexercises)
library(knitr)
library(kableExtra)
set.seed(1406)
normal(5, 200, 40)
normal(n = 5, m = 200, s = 40)
normal(5, 200, 40)
set.seed(1406)
normal(n = 5, m = 200, s = 40)
normal(5, 200, 40)
sum <- 0
for(i in 1:12){
sum <- sum + i
}
sum
x <- -4
if(x > 0){
y <- x^2
} else {
y <- -(x^2)
}
y
dist <- c("Normal", "Binomial", "Exponential", "Geometric", "Hypergeometric", "Negative Binomial",
"Poisson", "Student's t", "Uniform", "Chi-square")
func_names <- c("`norm`", "`binom`", "`exp`", "`geom`", "`hyper`", "`nbinom`", "`pois`", "`t`",
"`unif`", "`chisq`")
args <- c("`mean = 0`\\\n`sd = 0`", "`size =`\\\n`prob =`", "`rate =`", "`prob =`",
"`m =`\\\n`n =`\\\n`k =`", "`size =`\\\n`prob =`\\\n`mu =`", "`lambda =`",
"`df =`", "`min = 0`\\\n`max = 1`", "`df =`")
dist_table <- data.frame(Distribution = dist, `R Name` = func_names, Arguments = args)
colnames(dist_table)[2] <- c("R Name")
kable(dist_table, booktabs=TRUE, caption="Distribution names and arguments to use with probability functions.") %>%
column_spec(1:3, background="white")
?rbinom
?rexp
?rgeom
?rhyper
?rnbinom
?rpois
?rt
?runif
?rchisq
dist <- c("Normal", "Binomial", "Exponential", "Geometric", "Hypergeometric", "Negative Binomial",
"Poisson", "Student's t", "Uniform", "Chi-square")
func_names <- c("`norm`", "`binom`", "`exp`", "`geom`", "`hyper`", "`nbinom`", "`pois`", "`t`",
"`unif`", "`chisq`")
args <- c("`mean = 0`: the mean with default value 0.\\\n`sd = 1`: the standard deviation with default value 1.",
"`size =`: the number of trials.\\\n`prob =`: the probability of success for each trial.",
"`rate = 1`: the value of $\\theta$ with default value 1.",
"`prob =`: the probability of success in each trial.",
"`m =`: the number of objects of type I in the population.\\\n`n =`: the number of objects **not** of type I in the population.\\\n`k =`: the size of the sample taken from the population.",
"`size =`: the number of successful trials you want to observe.\\\n`prob =`: the probability of success in each trial.",
"`lambda =`: the value of $\\lambda$.",
"`df =`: the degrees of freedom.",
"`min = 0`: the lower limit of the distribution with default value 0.\\\n`max = 1`: the upper limit of the distribution with default value 1.",
"`df =`: the degrees of freedom.")
dist_table <- data.frame(Distribution = dist, `R Name` = func_names, Arguments = args)
colnames(dist_table)[2] <- c("R Name")
kable(dist_table, booktabs=TRUE, caption="Distribution names and arguments to use with probability functions.") %>%
column_spec(1:3, background="white")
knitr::opts_chunk$set(echo = TRUE, eval=TRUE, comment=NA)
library(webexercises)
library(knitr)
library(kableExtra)
set.seed(1406)
kable(dist_table, booktabs=TRUE, caption="Distribution names and arguments to use with probability functions.") %>%
column_spec(1:3, background="white")
rpois(3)
rpois(lambda=3)
rpois(n=1, lambda=3)
rpois(1, 3)
rpois(1, 3)
rpois(1, 3)
rpois(1, 3)
rpois(1, 3)
rpois(1, 3)
rpois(1, 3)
rpois(1, 3)
rpois(1, 3)
rpois(1, 3)
rpois(1, 3)
rpois(1, 3)
rpois(1, 3)
rpois(1, 3)
rpois(1, 3)
rpois(1, 3)
rpois(1, 3)
rpois(1000, 3)
mean(rpois(1000, 3))
subject <- data.frame(id = "P461", ldl = 148, hdl = 78, trig = 120, age = 41, gender = "male",
smoke = "current", weight = 84.05, height = 1.79)
subject <- as.matrix(subject)
kable(subject, caption="Cholesterol data for the fourteenth patient.")
library(knitr)
kable(subject, caption="Cholesterol data for the fourteenth patient.")
knitr::opts_chunk$set(echo = TRUE, eval=TRUE, comment=NA)
library(webexercises)
library(knitr)
library(kableExtra)
set.seed(1406)
chol <- read.table(file = "Data/chol.txt", header = TRUE, fileEncoding = 'UTF-8-BOM')
.libPaths("C:/Users/mtb3f/OneDrive - University of Glasgow/RStudio and ShinyApps/R/win-library/4.0")
?read.csv
.libPaths("C:/Users/mtb3f/OneDrive - University of Glasgow/RStudio and ShinyApps/R/win-library/4.0")
knitr::opts_chunk$set(echo = TRUE, eval=TRUE, comment=NA)
library(webexercises)
library(knitr)
library(kableExtra)
set.seed(1406)
education <- read.csv(file = "Data/edu.csv", na.strings = "*", fileEncoding = 'UTF-8-BOM')
# Added fileEncoding = 'UTF-8-BOM' argument here and following to avoid first variable name being prefaced with "ï.." on MB's PC
str(education)
complete.cases(education)
education[!is.na(education$teachers), ]
sort(education$pupils)
sort(education$pupils, decreasing = TRUE)[1]
tapply(X = education, INDEX = list(education$level, FUN = mean))
tapply(X = education, INDEX = list(education$level) FUN = mean)
tapply(X = education, INDEX = list(education$level), FUN = mean)
tapply(X = education$teachers, INDEX = list(education$level), FUN = mean)
tapply(X = education$teachers, INDEX = list(education$level), FUN = mean, na.rm = TRUE)
View(education)
1*2*3*4*5*6*7*8*9
1*2*3*4
1*2*3*4*5
1*2*3*4*5*6
?cumsum
cumprod(1)
cumprod(c(1, 2))
cumprod(c(1, 2, 3))
prod <- 0
i <- 1
while(prod < 500){
prod <- cumprod(i)
print(i)
i <- c(i, i+1)
}
prod <- 0
i <- 1
while(prod < 500){
prod <- max(cumprod(i))
print(i)
i <- c(i, i+1)
}
prod <- 0
i <- 1
while(prod < 500){
prod <- max(cumprod(i))
print(i, prod)
i <- c(i, i+1)
}
prod <- 0
i <- 1
while(prod < 500){
prod <- max(cumprod(i))
print(c(i, prod))
i <- c(i, i+1)
}
1+2+3+4+5+6+7+8+9
1+2+3+4+5+6+7+8+9+10+11+12+13+14+15
1+2+3+4+5+6+7+8+9+10+11+12+13
total <- 0
i <- 1
while(total < 100){
total <- total + sum(i)
i <- c(i, max(i)+1)
}
total <- 0
i <- 1
while(total < 100){
total <- total + sum(i)
i <- c(i, max(i)+1)
print(c(i, total))
}
total <- 0
i <- 1
while(total < 100){
total <- total + sum(i)
print(c(i, total))
i <- c(i, max(i)+1)
}
total <- 0
i <- 1
while(total < 100){
total <- sum(i)
print(c(i, total))
i <- c(i, max(i)+1)
}
total <- 0
i <- 1
iterations <- 0
while(total < 100){
total <- sum(i)
i <- c(i, max(i)+1)
iterations <- iterations + 1
}
print(c(i, total))
i <- 1
total <- 0
while(total < 100){
total <- sum(i)
i <- c(i, max(i)+1)
}
print(c(i, total))
i <- 1
total <- 0
while(total < 100){
total <- sum(i)
i <- c(i, max(i)+1)
}
data.frame(vector = i, sum = total)
i <- 1
total <- 0
while(total < 100){
total <- sum(i)
i <- c(i, max(i)+1)
}
print(c(i, total))
print(c(i, total))
```
print(c(i, total))
```
sum(1:13)
sum(1:14)
i <- 1
total <- 0
while(total < 100){
total <- sum(i)
i <- c(i, max(i)+1)
}
print(c(i, total))
sum(1:14)
sum(1:12)
sum(1:14)
i <- 0
total <- 0
while(total < 100){
total <- sum(i)
i <- c(i, max(i)+1)
}
print(c(i, total))
sum(1:3)
sum(1:13)
i <- 0
total <- 0
while(total < 100){
i <- c(i, max(i)+1)
total <- sum(i)
}
print(c(i, total))
i <- 0
total <- 0
while(total < 100){
i <- c(i, max(i)+1)
total <- sum(i)
}
list("i" = i, "total" = total)
sum <- 0
for(i in 1:12){
sum <- sum + i
}
sum(1:12)
x <- -4
if(x > 0){
y <- x^2
} else {
y <- -(x^2)
}
